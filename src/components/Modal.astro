---
export interface Props {
  id: string;
  title: string;
  cancelButtonText?: string;
  submitButtonText?: string;
}

const { 
  id, 
  title, 
  cancelButtonText = "Cancelar", 
  submitButtonText = "Guardar" 
} = Astro.props;
---

<div id={id} class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden p-4">
  <div class="bg-white dark:bg-zinc-800 p-4 sm:p-6 rounded-xl w-full max-w-sm sm:max-w-md">
    <h2 class="text-lg sm:text-xl font-bold mb-3 dark:text-white">{title}</h2>
    <form id={`${id}Form`} class="flex flex-col gap-3">
      <slot />
      <div class="flex flex-col sm:flex-row sm:justify-end gap-2 mt-3">
        <button 
          type="button" 
          id={`cancel${id}`}
          class="bg-zinc-500/20 text-zinc-500 px-4 py-2 rounded-lg transition-colors w-full sm:w-auto hover:scale-104 transition-all"
        >
          {cancelButtonText}
        </button>
        <button 
          type="submit"
          class="px-4 py-2 bg-orange-500/20 text-orange-500 rounded-lg hover:scale-104  transition-all w-full sm:w-auto"
        >
          {submitButtonText}
        </button>
      </div>
    </form>
  </div>
</div>

<script define:vars={{ id }}>
  // ConfiguraciÃ³n del modal
  const $modal = document.getElementById(id);
  const $cancelButton = document.getElementById(`cancel${id}`);
  const $form = document.getElementById(`${id}Form`);
  
  // Ocultar modal
  if ($cancelButton) {
    $cancelButton.onclick = () => {
      $modal.classList.add("hidden");
    };
  }
  
  // Cerrar modal al hacer clic fuera del contenido
  if ($modal) {
    $modal.addEventListener('click', (e) => {
      if (e.target === $modal) {
        $modal.classList.add("hidden");
      }
    });
  }
  
  // Exportar funciones para uso externo
  if ($modal) {
    window[`show${id}`] = () => {
      $modal.classList.remove("hidden");
    };
    
    window[`hide${id}`] = () => {
      $modal.classList.add("hidden");
    };
  }
</script>