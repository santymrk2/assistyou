---
import Modal from "../../../components/Modal.astro";
import CourseLayout from "../../../layouts/CourseLayout.astro";
import { db, eq, and, Student } from "astro:db";
import { getCourseData } from "../../../lib/courseUtils";

export const prerender = false;

const { id_school, id_course } = Astro.params;

if (!id_school || !id_course) {
  return new Response("Parámetros inválidos", {
    status: 400,
    statusText: "Bad Request",
  });
}

const result = await getCourseData(Astro.request, id_school, id_course);

if (result.error) {
  return new Response(result.error, {
    status: result.status,
    statusText: result.statusText,
  });
}

const { school, course, userId } = result;

const students = await db
  .select()
  .from(Student)
  .where(and(eq(Student.course_id, id_course), eq(Student.user_id, userId)));
---

<CourseLayout school={school} course={course} activeTab="index">
  <div>
    <div
      class="flex justify-between items-center w-full md:max-w-xl max-w-2xl my-8"
    >
      <h1 class="text-center text-2xl font-semibold text-white" id="courseData" data-course-id={id_course}>Alumnos</h1>
      <button
        id="addStudentBtn"
        class="bg-orange-600 hover:bg-orange-700 text-white font-bold mx-4 rounded-lg transition-colors"
      >
        <svg
          class="stroke-2 stroke-white size-8 group-hover:stroke-zinc-700"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M7 12h5m0 0h5m-5 0V7m0 5v5"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>
    </div>

    <!-- Modal para añadir escuela -->
    <Modal id="StudentModal" title="Añadir Nuevo Alumno">
      <div>
        <label for="studentName" class="block mb-2 dark:text-white"
          >Nombre del alumno</label
        >
        <input
          type="text"
          id="studentName"
          class="w-full p-2 border rounded-lg dark:bg-zinc-700 dark:text-white dark:border-zinc-600"
          required
        />
      </div>
    </Modal>

    {
      students.length === 0 ? (
        <p class="text-gray-400">
          No hay estudiantes registrados en este curso.
        </p>
      ) : (
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-100 dark:bg-zinc-900">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Nombre
                </th>
                {/* Puedes agregar más encabezados aquí */}
              </tr>
            </thead>
            <tbody class="bg-white dark:bg-zinc-900 divide-y divide-gray-200">
              {students.map((student) => (
                <tr class="hover:bg-gray-100 dark:hover:bg-zinc-800">
                  <td class="px-6 py-4 whitespace-nowrap dark:text-white">
                    <a href={`/${school.id}/${course.id}/${student.id}`}>
                      {student.name}
                    </a>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )
    }
  </div>
</CourseLayout>

<script>
  import { $ } from "../../../lib/dom-selector";

  const $addStudentBtn = $("#addStudentBtn");
  const $studentForm = $("#StudentModalForm");

  // Mostrar modal
  if ($addStudentBtn) {
      // Usar una aserción de tipo
      ($addStudentBtn as HTMLElement).addEventListener("click", () => {
          (window as any).showStudentModal();
      });
  }

  // Enviar formulario
  if ($studentForm) {
      $studentForm.onsubmit = async (e) => {
          e.preventDefault();

          const studentName = ($("#studentName") as HTMLInputElement).value;

          if (!studentName) return;

          
          const courseDataEl = document.getElementById("courseData");
            const id_course = courseDataEl.dataset.courseId;


          try {
              const response = await fetch("/api/students", {
                  method: "POST",
                  headers: {
                      "Content-Type": "application/json",
                  },
                  body: JSON.stringify({ name: studentName, course_id: id_course }),
              });

              if (response.ok) {
                  // Recargar la página para mostrar la nueva escuela
                  window.location.reload();
              } else {
                  console.error("Error al crear el estudiante");
              }
          } catch (error) {
              console.error("Error:", error);
          }
      };
  }
</script>
