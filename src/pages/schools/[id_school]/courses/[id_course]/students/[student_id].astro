---
import Layout from "../../../../../../layouts/Layout.astro";
import {
  db,
  eq,
  School,
  Course,
  Student,
  Attendance,
  AttendanceStudent,
  Exam,
  ExamStudent,
} from "astro:db";

export const prerender = false;

const { id_school, id_course, student_id } = Astro.params;

// Validar parámetros
if (!id_school || !id_course || !student_id) {
  return new Response("Parámetros inválidos", {
    status: 400,
    statusText: "Bad Request",
  });
}

// Obtener datos de la escuela, curso y estudiante
const [school, course, student] = await Promise.all([
  db
    .select()
    .from(School)
    .where(eq(School.id, id_school))
    .then((res) => res[0]),
  db
    .select()
    .from(Course)
    .where(eq(Course.id, id_course))
    .then((res) => res[0]),
  db
    .select()
    .from(Student)
    .where(eq(Student.id, student_id))
    .then((res) => res[0]),
]);

// Validar existencia de los recursos
if (!school || !course || !student) {
  return new Response("Recurso no encontrado", {
    status: 404,
    statusText: "Not Found",
  });
}

// Verificar que el curso pertenece a la escuela y que el estudiante está inscrito en el curso
if (course.school_id !== school.id || student.course_id !== course.id) {
  return new Response(
    "El estudiante no pertenece al curso o la escuela especificados",
    {
      status: 400,
      statusText: "Bad Request",
    }
  );
}

// Obtener datos de asistencia
// Total de clases impartidas en el curso:
const allAttendances = await db
  .select()
  .from(Attendance)
  .where(eq(Attendance.course_id, course.id));

// Clases a las que asistió el estudiante (se registra en AttendanceStudent)
const attendedAttendances = await db
  .select()
  .from(AttendanceStudent)
  .where(eq(AttendanceStudent.student_id, student.id));

const totalClasses = allAttendances.length;
const attendedClasses = attendedAttendances.length;
const attendancePercentage =
  totalClasses > 0 ? (attendedClasses / totalClasses) * 100 : 0;

// Obtener datos de exámenes: unir la tabla ExamStudent con Exam para obtener detalles del examen y la nota
const examRecords = await db
  .select()
  .from(ExamStudent)
  .where(eq(ExamStudent.student_id, student.id));

const examDetails = await Promise.all(
  examRecords.map(async (record) => {
    const exam = await db
      .select()
      .from(Exam)
      .where(eq(Exam.id, record.exam_id))
      .then((res) => res[0]);
    return { exam, nota: record.nota };
  })
);
---

<Layout>
  <section class="p-4">
    <div class="mb-6">
      <a
        href={`/schools/${school.id}/courses/${course.id}`}
        class="text-orange-600 hover:underline"
      >
        &larr; Volver a {course.name}
      </a>
    </div>

    <h1 class="text-3xl font-bold mb-2 dark:text-white">
      Perfil del Estudiante
    </h1>

    <div class="rounded-lg p-4 dark:text-white">
      <h2 class="text-2xl font-semibold mb-4">{student.name}</h2>
      <p class="mb-2"><strong>Curso:</strong> {course.name}</p>
      <p class="mb-2"><strong>Escuela:</strong> {school.name}</p>
      <!-- Se puede agregar más información del estudiante aquí -->
    </div>

    <div class="dark:text-white p-4">
      <h3 class="text-xl font-semibold mb-2">Asistencia</h3>
      <div class="mb-2 flex flex-col items-center justify-center">
        <div class="relative">
          <svg class="w-64 h-40" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 120">
            <!-- Arco base en gris -->
            <path d="M 30 100 A 70 70 0 0 1 170 100" fill="none" stroke="lightgray" stroke-width="10" stroke-linecap="round" />
            
            <!-- Arco de progreso -->
            <path id="progress" d="M 30 100 A 70 70 0 0 1 170 100" fill="none" stroke="orange" stroke-width="10" stroke-linecap="round" stroke-dasharray="0 440" />
            
            <!-- Texto de asistencia -->
            <text x="100" y="80" font-family="Inter" font-size="18" font-weight="bold" text-anchor="middle">
              <tspan id="attendance-text">0/0</tspan>
            </text>
          </svg>
        </div>
      </div>
      <p class="mb-2 text-center"><span id="attendance-percentage">0</span>%</p>
    </div>
    


    <div class="dark:text-white p-4">
      <h3 class="text-xl font-semibold mb-2">Exámenes</h3>
      {examDetails.length === 0 ? (
        <p class="mb-2">No se encontraron exámenes para este estudiante.</p>
      ) : (
        <div class="grid grid-cols-2 gap-4">
          {examDetails.map(({ exam, nota }) => (
            <div
              class="flex flex-col justify-center items-center gap-2 bg-zinc-700 p-4 rounded-lg text-center"
            >
              <p class="text-sm text-zinc-300">
                {new Date(exam.exam_date).toLocaleDateString()}
              </p>
              <p class="text-xl">{exam.name}</p>
              <p class="font-extrabold">
                {nota !== null ? nota : "Sin calificar"}
              </p>
            </div>
          ))}
        </div>
      )}
    </div>
  </section>
</Layout>


<script>
  function updateAttendance(attendedClasses, totalClasses) {
    // Calcular el porcentaje de asistencia
    const percentage = totalClasses > 0 ? (attendedClasses / totalClasses) * 100 : 0;
    
    // Actualizar el texto de asistencia
    document.getElementById("attendance-text").textContent = `${attendedClasses}/${totalClasses}`;
    
    // Actualizar el porcentaje mostrado
    document.getElementById("attendance-percentage").textContent = percentage.toFixed(2);
    
    // Actualizar el arco de progreso
    const strokeValue = (percentage / 100) * 220;
    document.getElementById("progress").setAttribute("stroke-dasharray", `${strokeValue} 440`);
    
    // Cambiar el color según el porcentaje
    let color = "blue";
    if (percentage > 70) {
      color = "green";
    } else if (percentage > 40) {
      color = "orange";
    } else {
      color = "red";
    }
    document.getElementById("progress").setAttribute("stroke", color);
  }
  
  // Uso del componente
  // Reemplaza estos valores con las variables reales {attendedClasses} y {totalClasses}
  updateAttendance(12, 14);
</script>
