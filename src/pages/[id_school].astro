---
import Modal from "../components/Modal.astro";
import Layout from "../layouts/Layout.astro";
import { generateId } from "../lib/utils";
import { getSession } from "auth-astro/server";
import { db, eq, and, School, Course } from "astro:db";

export const prerender = false;

const { id_school } = Astro.params;

const session = await getSession(Astro.request);

if (!session) {
  return new Response("No hay sesión activa", {
    status: 401,
    statusText: "Unauthorized",
  });
}

const userId = generateId(session.user.email);

// Validar que el ID existe
if (!id_school || typeof id_school !== "string") {
  return new Response("ID de escuela inválido", {
    status: 400,
    statusText: "Bad Request",
  });
}

// Obtener datos
const [school, courses] = await Promise.all([
  db
    .select()
    .from(School)
    .where(and(eq(School.id, id_school), eq(School.user_id, userId)))
    .then((res) => res[0]),
  db
    .select()
    .from(Course)
    .where(and(eq(Course.school_id, id_school), eq(Course.user_id, userId))),
]);

if (!school) {
  return new Response("Escuela no encontrada", {
    status: 404,
    statusText: "Not Found",
  });
}
---

<Layout>
  <section class="p-4 w-full md:w-3/4 lg:w-1/2">
    <div class="mb-6">
      <a href="/" class="text-orange-500"> &larr; Volver a página principal </a>
    </div>

    <h1 class="text-3xl font-bold mb-2 dark:text-white" id="schoolData" data-school-id={id_school}>{school.name}</h1>
    <div
      class="flex justify-between items-center w-full md:max-w-xl max-w-2xl mb-6"
    >
      <h1 class="text-center text-2xl font-black text-white">Cursos</h1>
      <button
        id="addCourseBtn"
        class="bg-orange-500/20 hover:scale-104 text-white font-bold mx-4 rounded-lg transition-colors transition-all"
      >
        <svg
          class="stroke-2 stroke-orange-500 size-8 group-hover:stroke-zinc-700"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M7 12h5m0 0h5m-5 0V7m0 5v5"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>
    </div>

    <Modal id="CourseModal" title="Añadir Nuevo Curso">
      <div>
        <label for="courseName" class="block mb-2 dark:text-white"
          >Nombre de la Curso</label
        >
        <input
          type="text"
          id="courseName"
          class="w-full p-2 border rounded-lg dark:bg-zinc-700 dark:text-white dark:border-zinc-600"
          required
        />
      </div>
      <!-- 
      <div class="mt-4">
        <label for="courseType" class="block mb-2 dark:text-white"
          >Escuela</label
        >
        <select
          id="courseType"
          class="w-full p-2 border rounded-lg dark:bg-zinc-700 dark:text-white dark:border-zinc-600"
          required
        >
          <option value="" disabled selected>Selecciona una escuela</option>
          
          <option value="publica">Pública</option>
          <option value="privada">Privada</option>
        </select>
      </div>
    -->
    </Modal>

    {
      courses.length === 0 ? (
        <p class="text-white">No hay cursos registrados en esta escuela.</p>
      ) : (
        <ul class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {courses.map((course) => (
            <li class="bg-orange-500/20 hover:scale-104 rounded-lg shadow transition-colors">
              <a href={`/${school.id}/${course.id}`} class="block">
                <div
                  id={`course-` + course.name}
                  class="flex items-center justify-center font-black text-2xl text-orange-500 p-4 rounded-xl text-center"
                >
                  {course.name}
                </div>
              </a>
            </li>
          ))}
        </ul>
      )
    }
  </section>
</Layout>

<script>
  import { $ } from "../lib/dom-selector";

  const $addCourseBtn = $("#addCourseBtn");
  const $courseForm = $("#CourseModalForm");

  // Mostrar modal
  if ($addCourseBtn) {
    // Usar una aserción de tipo
    ($addCourseBtn as HTMLElement).addEventListener("click", () => {
      (window as any).showCourseModal();
    });
  }

    // Enviar formulario
    if ($courseForm) {
        $courseForm.onsubmit = async (e) => {
            e.preventDefault();

            const courseName = ($("#courseName") as HTMLInputElement).value;

            if (!courseName) return;

            const schoolDataEl = document.getElementById("schoolData");
            const id_school = schoolDataEl.dataset.schoolId;


            try {
                const response = await fetch("/api/courses", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ name: courseName, school_id: id_school }),
                });

                if (response.ok) {
                    window.location.reload();
                } else {
                    console.error("Error al crear el curso");
                }
            } catch (error) {
                console.error("Error:", error);
            }
        };
    }

</script>
